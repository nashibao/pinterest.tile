// Generated by CoffeeScript 1.3.1
var Pinterest,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Pinterest = (function() {

  function Pinterest() {}

  return Pinterest;

})();

Pinterest.Tile = (function() {

  function Tile(options) {
    this.start = __bind(this.start, this);

    var allcalc, container_dom, img_dom_height, inner_dom_func, tile_top, tile_width,
      _this = this;
    container_dom = options.container_dom, tile_width = options.tile_width, tile_top = options.tile_top, inner_dom_func = options.inner_dom_func, img_dom_height = options.img_dom_height, allcalc = options.allcalc;
    this.container_dom = container_dom ? container_dom : $(document);
    this.tile_width = tile_width ? tile_width : 320;
    this.tile_top = tile_top ? tile_top : 0;
    this.inner_dom_func = inner_dom_func ? inner_dom_func : void 0;
    this.img_dom_height = img_dom_height ? img_dom_height : 0;
    this.allcalc = allcalc ? allcalc : false;
    this.columns = [];
    $(window).resize(function() {
      return _this.start();
    });
  }

  Tile.prototype.start = function(force) {
    var col_index, col_num, column, dom, i, imgdom, max_height, padding, parent, _i, _j, _len, _ref, _ref1;
    if (force == null) {
      force = false;
    }
    parent = $(this.container_dom);
    col_num = Math.floor(parent.width() / this.tile_width);
    if (!this.allcalc && !force && this.columns.length !== 0 && col_num === this.columns.length) {
      return;
    }
    padding = 0;
    if (this.allcalc) {
      padding = (parent.width() - (col_num * this.tile_width)) / 2;
    }
    this.columns = [];
    for (i = _i = 0, _ref = col_num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.columns.push({
        height: this.tile_top,
        rows: []
      });
    }
    col_index = 0;
    max_height = 0;
    _ref1 = this.inner_dom_func();
    for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
      dom = _ref1[_j];
      dom = $(dom);
      column = this.columns[col_index];
      column.rows.push(dom);
      dom.offset({
        top: parent.offset().top + column.height,
        left: padding + parent.offset().left + this.tile_width * col_index
      });
      column.height += dom.height();
      imgdom = $("img", dom);
      if (imgdom && imgdom.height() === 0) {
        column.height += this.img_dom_height;
      }
      col_index += 1;
      if (col_index === col_num) {
        col_index = 0;
      }
      if (max_height < column.height) {
        max_height = column.height;
      }
    }
    return parent.height(max_height + 30);
  };

  return Tile;

})();
