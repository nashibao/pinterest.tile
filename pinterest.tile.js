// Generated by CoffeeScript 1.3.3
var Pinterest,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Pinterest = (function() {

  function Pinterest() {}

  return Pinterest;

})();

Pinterest.Tile = (function() {

  function Tile(options) {
    this.resize = __bind(this.resize, this);

    this.start = __bind(this.start, this);

    var container, get_tiles, tile_width;
    container = options.container, tile_width = options.tile_width, get_tiles = options.get_tiles;
    this.container = container ? container : $(document);
    this.tile_width = tile_width ? tile_width : 320;
    this.get_tiles = get_tiles ? get_tiles : void 0;
    this.columns = [];
  }

  Tile.prototype.start = function() {
    var _this = this;
    this.resize();
    return $(window).resize(function() {
      return _this.resize();
    });
  };

  Tile.prototype.resize = function(force_resizing) {
    var col_index, col_num, column, container, dom, i, max_height, only_width, padding, _i, _j, _k, _l, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
    if (force_resizing == null) {
      force_resizing = false;
    }
    container = $(this.container);
    col_num = Math.floor(container.width() / this.tile_width);
    only_width = false;
    if (!force_resizing && this.columns.length !== 0 && col_num === this.columns.length) {
      only_width = true;
    }
    padding = (container.width() - (col_num * this.tile_width)) / 2;
    if (only_width) {
      col_index = 0;
      _ref = this.columns;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        _ref1 = column.rows;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          dom = _ref1[_j];
          dom.offset({
            top: dom.offset().top,
            left: padding + container.offset().left + this.tile_width * col_index
          });
        }
        col_index += 1;
      }
    } else {
      this.columns = [];
      for (i = _k = 0, _ref2 = col_num - 1; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; i = 0 <= _ref2 ? ++_k : --_k) {
        this.columns.push({
          height: 0,
          rows: []
        });
      }
      col_index = 0;
      max_height = 0;
      _ref3 = this.get_tiles();
      for (_l = 0, _len2 = _ref3.length; _l < _len2; _l++) {
        dom = _ref3[_l];
        dom = $(dom);
        column = this.columns[col_index];
        column.rows.push(dom);
        dom.offset({
          top: container.offset().top + column.height,
          left: padding + container.offset().left + this.tile_width * col_index
        });
        column.height += dom.height();
        col_index += 1;
        if (col_index === col_num) {
          col_index = 0;
        }
        if (max_height < column.height) {
          max_height = column.height;
        }
      }
    }
    return container.height(max_height + 30);
  };

  return Tile;

})();
